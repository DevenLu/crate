// apply from: "$rootDir/gradle/javaModule.gradle"
apply plugin: 'java-library'
apply plugin: 'groovy'

archivesBaseName = 'crate-sql'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile project(':shared')
    compile project(':core')
    compile project(':dex')
    compile project(':blob')
    compile project(':sql-parser')
    compile project(':udc')
    compile project(':ssl')
    compile "io.netty:netty-transport:${versions.netty4}"
    compile "io.netty:netty-codec:${versions.netty4}"
    compile "io.netty:netty-buffer:${versions.netty4}"
    compile "com.google.guava:guava:${versions.guava}"
    compile "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
    compile "org.apache.commons:commons-math3:${versions.commonsmath}"
    // Needed by aws-java-sdk-s3 in Java 9
    compile "javax.xml:jaxb-api:${versions.jaxb_api}"

    testCompile project(':sql-testing')
    testCompile project(':dex-testing')
    testCompile 'org.skyscreamer:jsonassert:1.3.0'
    testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    testCompile "org.slf4j:slf4j-api:${versions.slf4j}"
    testCompile("io.crate:crate-jdbc:${versions.crate_jdbc}") {
        exclude group: 'net.java.dev.jna', module: 'jna'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    }
}

//jmhJar {
//    append 'META-INF/services/org.apache.lucene.codecs.DocValuesFormat'
//    append 'META-INF/services/org.apache.lucene.codecs.Codec'
//    append 'META-INF/services/org.apache.lucene.codecs.PostingsFormat'
//}


test {
    testLogging.exceptionFormat = 'full'
    outputs.dir("$projectDir/data")

    jacoco.excludes = ["*Test*"]

    // make sure sources are first on classpath because we do override some class(es) (currently: lucene's AssertingLeafReader)
    classpath = sourceSets.main.output + sourceSets.test.output + configurations.testCompile

    // by default `-D` arguments are "caught" in the gradle process
    // and not passed-through to the test process.
    // this enables test options like '-Dtests.iters=20'

    System.properties.each { k, v ->
        if (k.startsWith('tests.')) {
            systemProperty k, v
        }
    }

    // ES testing framework adds the resources target build paths to the classpath of the tests,
    // but if the src/[main|test]/resources directories of a project are empty, then these dirs
    // are missing from the target build directory which causes all tests to fail.
    // The groovy target build paths have the same problem.
    // To prevent this case we always create the target build resource and groovy directories upfront.
    doFirst {
        file(project.buildDir.path + '/resources/main').mkdirs()
        file(project.buildDir.path + '/resources/test').mkdirs()
        file(project.buildDir.path + '/classes/groovy/main').mkdirs()
        file(project.buildDir.path + '/classes/groovy/test').mkdirs()
    }
}

clean.dependsOn('cleanTest')

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
        }
    }
}

// suppress Sun API warnings
compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true
}
javadoc {
    options.addStringOption('XDignore.symbol.file', '')
}
